(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{381:function(e,t,n){"use strict";n.r(t);var o=n(279),r={data:function(){return{colorScheme:{0:"#ffffff",1:"#ee0000",2:"#00d800",3:"#fefe00",4:"#ffa100",5:"#0000f2"},example1:"R' U' F U' F2 U' F2 L2 U' B2 D2 F U2 B' D' B D' F2 R' U' L' B U2 R' U' F",example2:["n","n","d","n","n","b","n","n","d","r","l","r","r","n","r","r","l","r","n","n","b","d","n","b","n","n","b"],example3:["n","n","n","n","n","n","n","n","l","b","n","n","n","n","n","n","n","n","n","n","u","n","n","n","r","n","n"]}},mounted:function(){var e={};e.colorScheme=this.colorScheme,e.algorithm=this.example1,o.cubePNG(document.getElementById("example1"),e),(e={}).facelets=this.example2,o.cubePNG(document.getElementById("example2"),e),e.facelets=this.example3,o.cubePNG(document.getElementById("example3"),e)}},d=n(44),component=Object(d.a)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("h2",[e._v("部分的ドミノリダクション")]),e._v(" "),n("p",[e._v("\n    Sometimes, after you complete a DR step you may get what we call a Partial Domino Reduction, or PDR. It’s\n    “partial” because you already have two of the three steps needed for DR, solved: CO, E-layer or EO. In this\n    section we will go through all the possibilities.\n  ")]),e._v(" "),n("p",[e._v("\n    Remember that a perfectly valid option with PDR is to keep going with the solve as if you had DR and fix\n    everything with insertions at the end.\n  ")]),e._v(" "),n("h3",[e._v("2.2.1 PDR in which you have CO and EO")]),e._v(" "),n("h4",[e._v("1 bad edge")]),e._v(" "),n("p",[e._v("\n    There are two ways to deal with this case. The first one is to insert a commutator, either during the solve or\n    at the end when you have a full skeleton. Edge commutators may cancel more than average in DR solves so\n    it would be better to leave this at the end. Nonetheless, if you decide to insert the commutator while setting\n    up the trigger, then you must pay attention to what edges you are cycling. For a 3 cycle the only valid options are:\n  ")]),e._v(" "),e._m(0),e._v(" "),n("p",[e._v("\n    The other option is to insert a slice that swaps the bad edge with the last E-edge and either two U/D edges\n    or two good edges. Here is an example of this by Sebastiano Tronto:\n  ")]),e._v(" "),n("div",[n("b-card",{attrs:{title:"First PDR Example"}},[n("b-card-text",[e._v("\n        スクランブル："+e._s(e.example1)+"\n      ")]),e._v(" "),n("b-row",[n("b-col",{attrs:{sm:"8"}},[n("b-card-text",[n("div",[e._v("F U D' R "),n("span",{staticClass:"text-muted"},[e._v("// EO (4/4)")])]),e._v(" "),n("div",[e._v("F "),n("span",{staticClass:"text-muted"},[e._v("// 3e1c (1/5)")])]),e._v(" "),n("div",[e._v("L2 U' * B U' B' "),n("span",{staticClass:"text-muted"},[e._v("/1e (5/10)")])]),e._v(" "),n("div",[e._v("* = U' M2 U (3/13) "),n("span",{staticClass:"text-muted"},[e._v("// DR")])])])],1),e._v(" "),n("b-col",{attrs:{sm:"4"}},[n("div",{attrs:{id:"example1"}})])],1)],1)],1),e._v(" "),n("h4",[e._v("2 bad edges")]),e._v(" "),n("div",[n("b-card",{attrs:{title:"Break & Solve"}},[n("b-row",[n("b-col",{attrs:{sm:"8"}},[n("b-card-text",[n("div",[e._v("R' E2 R or R E2 R’'")]),e._v(" "),n("div",[e._v("Other Variations")])])],1),e._v(" "),n("b-col",{attrs:{sm:"4"}},[n("div",{attrs:{id:"example2"}})])],1)],1)],1),e._v(" "),n("p",[e._v("\n    Your goal is to form a column with the E edges on the opposite face as the 2 bad edges and then swap them with\n    R’ E2 R and variations. As in the previous case, you can insert a slice move in your solve that swaps the 2 bad\n    edges with the two E-edges. R’ U2 D2 L = R’ E2 R is in fact the easiest case of setup to a single slice.\n  ")]),e._v(" "),n("h4",[e._v("3 or 4 bad edges")]),e._v(" "),e._m(1),e._v(" "),n("p",[e._v("\n    If none of these seem to have good continuations, you should start looking for a different DR\n  ")]),e._v(" "),n("h3",[e._v("2.2.3 PDR in which you already have E-layer and EO")]),e._v(" "),n("h4",[e._v("2 bad corners")]),e._v(" "),n("div",[n("b-card",{attrs:{title:"Fake Swap"}},[n("b-row",[n("b-col",{attrs:{sm:"8"}},[n("b-card-text",[n("div",[e._v("R U' L2 U R'")]),e._v(" "),n("div",[e._v("Other Variations")])])],1),e._v(" "),n("b-col",{attrs:{sm:"4"}},[n("div",{attrs:{id:"example3"}})])],1)],1)],1),e._v(" "),n("h4",[e._v("3 bad corners")]),e._v(" "),n("p",[e._v("\n    You can insert a sune or a 3-corner commutator. Keep in mind that the sune does a 3 cycle of edges as well, so\n    the same rules that were explained in the ”1 bad edge” section for which edges can be cycled apply here.\n  ")]),e._v(" "),n("p",[e._v("\n    If you decide to insert a commutator during the setup phase, you should go for the classic 8movers (pure). If you\n    decide to keep on solving with PDR and insert the corners after you have a full skeleton, in section 5.1 we will\n    talk about ”DR special” algorithms that may cancel more moves.\n  ")]),e._v(" "),n("h4",[e._v("4 to 8 bad corners")]),e._v(" "),n("p",[e._v("\n    It’s better to look for another DR\n  ")]),e._v(" "),n("h3",[e._v("2.2.3 PDR in which you already have CO and E-layer")]),e._v(" "),n("h4",[e._v("0 corners and 0 edges")]),e._v(" "),e._m(2),e._v(" "),n("p",[e._v("\n    Alexandre Campos has a nice document (click here!) that collects a lot of corner-PDR and DR solves\n  ")])])}),[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n    Bad edge → E-edge in the U/D layer → Good edge "),n("br"),e._v("\n    Bad edge → U/D edge → E-edge in the U/D layer\n  ")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n    This is not a very good case but you have a few options to consider: "),n("br"),e._v("\n    -You could insert two slices that swap the bad edges with E-edges. "),n("br"),e._v("\n    -You could perform a single move that takes you either to a 4c1e case or to a 4c2e case. "),n("br"),e._v("\n    -You could keep on going with your corners first solve and insert the edges when you have a full skeleton. "),n("br")])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("p",[e._v("\n    You can use M’ U M, M’ U M’ and other Roux-like EO’s. "),n("br"),e._v("\n    In this particular case you already have 4 good edges and all the corners oriented but you don’t have EO. To\n    achieve DR you need to orient the edges using the S and M slices like in the second to last step of the Roux method\n  ")])}],!1,null,null,null);t.default=component.exports}}]);